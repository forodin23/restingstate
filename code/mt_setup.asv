function dirRoot = mt_setup(user)
% ** function mt_setup(user) 
% This script allows to adjust the most important parameters for the memory
% task. Define the variables here before you run mt_run.m.
% 
% IMPORTANT:    Do not change the order in which the variables are defined.
%               Some variables have mutual dependencies.
%
% >>> INPUT VARIABLES >>>
% NAME              TYPE        DESCRIPTION
% user              char       	pre-defined user name (see mt_loadUser.m)

% <<< OUTPUT VARIABLES <<<
% NAME              TYPE        DESCRIPTION
% dirRoot           char        path to root working directory
%
% 
% AUTHOR:   Marco Rüth, contact@marcorueth.com
%           Jens Klinzing, jens.klinzing@uni-tuebingen.de

%% ============================== BASICS ================================ %
% IMPORTANT: add your user profile in mt_loadUser
[dirRoot, dirPTB]   = mt_profile(user);

% Expermimental Details
experimentName      = 'Sleep Connectivity'; % name of your study
nLearningSess       = 3; % number of learning runs for learning
nInterferenceSess   = 3; % number of learning runs for interference
nMinRecall          = 1; % minimum runs for immediate recall (with feedback)
nMaxRecall          = 1; % maximum runs for immediate recall (to exclude if too poor performance)
nFinalRecall        = 1; % number of runs for final recall (incl. one last session w/o feedback)
RecallThreshold     = 40;% miniumum correct answers in recall (in percent)

% System
% screenNumber    = 2; % select specific screen
priority_level      = 0; % 'max' or number, put 0 if you don't have privileged rights

triggerOdorOn       = {0, 65, 20}; % trigger for MEG, SL3, SL4
triggerPlaceboOn    = {0, 130, 40}; % trigger for MEG, SL3, SL4
EEGtrigger          = 0;
EEGtriggerOn        = {0, 64, 4};
EEGtriggerOff       = {0, 128, 8};


%% ================================ TEXT ================================ %
% Text strings used during the program

textFixation = { ...
    ''
    ''
    ''
    'Es erscheint nun ein Punkt in der Mitte'
    'des Bildschirms. Bitte schauen Sie auf diesen'
    'Punkt, solange er angezeigt wird.'
    ''
    'Dies wird etwa 6 Minuten dauern.'
};
textFixation2 = { ...
    ''
    ''
    ''
    'Legen Sie Ihre Hände bitte locker in den Schoß.'
    ''
    ''
    'Haben Sie noch Fragen zum Ablauf?'
};

textOutro = { ...
    ''
    ''
    ''
    'Ende'
    ''
    'Vielen Dank!'
    ''
};

% Text Properties
textDefSize     = 25;           % default Text Size
textDefFont     = 'Arial';      % default Text Font
textDefColor    = [0 0 0];      % default Text Color
textSx          = 'center';     % default Text x-position
textSy          = 10;           % default Text y-position
textVSpacing    = 2;            % default Text vertical line spacing




%% ============================== OPTIONAL ============================== %
% Change Cursor Type
CursorType          = 'Arrow';

% Set Display properties
% Define which window size is used as reference to display the cards
windowSize          = get(0, 'MonitorPositions'); % [1024 768];
windowSize          = [(4/3 * windowSize(end)) windowSize(end)];
screenBgColor       = [1 1 1]*0.9; % greyish background
textBgColor         = [1 1 1]*0.9; % greyish background

% Define which display window is used (put a number)
% Note: by default external screens are automatically used if connected 
% window              = ;

% Fixation Task (mt_fixationTask)
fixationDisplay     = (6 * 60);     % Duration of fixation task


%% ======================= DO NOT CHANGE FROM HERE ====================== %
% Unless you know what you are doing...
% !!!!! Changes need further adjustments in other files and scripts !!!!! %

% Folder for configurations
setupdir            = fullfile(dirRoot, 'setup');
if ~exist(setupdir, 'dir')
    mkdir(setupdir) % create folder in first run
end

dirData = dirRoot;
dirSplit = strsplit(dirRoot,'\');
if strcmp(dirSplit(end), '')
    dirData = dirRoot(1:end-1);
    dirData = strrep(dirData, dirSplit(end-1), '');
else
    dirData = strrep(dirData, dirSplit(end), '');
end
dirData = dirData{:};
% Folder for data
if ~exist(fullfile(dirData, 'DATA'), 'dir')
    mkdir(fullfile(dirData, 'DATA')) % create folder in first run
    mkdir(fullfile(dirData, 'BACKUP'))
end

odorTable = load(fullfile(setupdir, 'mt_odor_rand'));
odorTable = odorTable.odor_rand;
maxSubjectNr = size(odorTable, 1);

% Changing the accepted cases also requires to change mt_dialogues.m
cfg_cases.subjects  = 0:maxSubjectNr;                   % 0 is debug
cfg_cases.nights    = {'1', '2'};                       % Night 1 or 2
cfg_cases.sesstype  = {'1', '2', '3'};                  % Session Type
cfg_cases.lab       = {'SL3', 'SL4'};                   % Lab/Location
cfg_cases.sessNames = {'Pre-Learning', 'Post-Learning', 'Post-Recall'};

% Read in fixation images
[imgDot, ~, alpha]          = imread(fullfile(imgfolderFeedback, imagesFixation{1}));
imgDot(:,:,4)               = alpha;
[imgDotSmall, ~, alpha]     = imread(fullfile(imgfolderFeedback, imagesFixation{2}));
imgDotSmall(:,:,4)          = alpha;



% Store 2D coordinates for cards to be flipped
cardSequence 	= {...
    { % Memory version A
    % Sequence for Control
    controlSequence; % identical across subjects
    % Sequence for Learning
    imageSequenceMainLearningCoordsA; ...
    % Sequence for Interference Learning
    imageSequenceInterferenceLearningCoordsA; ...
    % Sequence for Interference Recall
    imageSequenceInterferenceRecallCoordsA; ...
    % Sequence for Immediate Recall & Retrieval
    imageSequenceMainRecallCoordsA; ...
    % Sequence for Gray Mode
    controlSequence ...
    }
    { % Memory version B
    % Sequence for Control
    controlSequence; % identical across subjects
    % Sequence for Learning
    imageSequenceMainLearningCoordsB; ...
    % Sequence for Interference Learning
    imageSequenceInterferenceLearningCoordsB; ...
    % Sequence for Interference Recall
    imageSequenceInterferenceRecallCoordsB; ...
    % Sequence for Immediate Recall & Retrieval
    imageSequenceMainRecallCoordsB; ...
    % Sequence for Gray Mode
    controlSequence ...
    }
}; 

% % Transform intuitive 2D coordinates into 1D coordinates used for iteration
% cardSequence        = cell(size(imageSequence2D));
% for r = 1: size(cardSequence, 2)
%     cardSequence{r} = cellfun(@(x) mt_cards2Dto1D(x, ncards_x, ncards_y), imageSequence2D{r});
% end


% Save configuration in workdir
cd(dirRoot)
save(fullfile(setupdir, 'mt_params.mat'))
end